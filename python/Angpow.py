# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import Angpow_swig_py
else:
    import Angpow_swig_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class wallTimer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Angpow_swig_py.wallTimer_swiginit(self, Angpow_swig_py.new_wallTimer())

    def start(self):
        return Angpow_swig_py.wallTimer_start(self)

    def stop(self):
        return Angpow_swig_py.wallTimer_stop(self)
    __swig_destroy__ = Angpow_swig_py.delete_wallTimer

# Register wallTimer in Angpow_swig_py:
Angpow_swig_py.wallTimer_swigregister(wallTimer)

class ClassFunc1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Angpow_swig_py.delete_ClassFunc1D

    def __call__(self, x):
        return Angpow_swig_py.ClassFunc1D___call__(self, x)

# Register ClassFunc1D in Angpow_swig_py:
Angpow_swig_py.ClassFunc1D_swigregister(ClassFunc1D)

class ClassFunc1D_get_value(ClassFunc1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ClassFunc1D_get_value:
            _self = None
        else:
            _self = self
        Angpow_swig_py.ClassFunc1D_get_value_swiginit(self, Angpow_swig_py.new_ClassFunc1D_get_value(_self, ))
    __swig_destroy__ = Angpow_swig_py.delete_ClassFunc1D_get_value

    def get_value(self, x):
        return Angpow_swig_py.ClassFunc1D_get_value_get_value(self, x)

    def __call__(self, x):
        return Angpow_swig_py.ClassFunc1D_get_value___call__(self, x)
    def __disown__(self):
        self.this.disown()
        Angpow_swig_py.disown_ClassFunc1D_get_value(self)
        return weakref.proxy(self)

# Register ClassFunc1D_get_value in Angpow_swig_py:
Angpow_swig_py.ClassFunc1D_get_value_swigregister(ClassFunc1D_get_value)

class CheFunc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, func, ordFunc):
        Angpow_swig_py.CheFunc_swiginit(self, Angpow_swig_py.new_CheFunc(func, ordFunc))
    __swig_destroy__ = Angpow_swig_py.delete_CheFunc

    def ChebyshevTransform(self, a, b):
        return Angpow_swig_py.CheFunc_ChebyshevTransform(self, a, b)

# Register CheFunc in Angpow_swig_py:
Angpow_swig_py.CheFunc_swigregister(CheFunc)

class CheAlgo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, farr):
        Angpow_swig_py.CheAlgo_swiginit(self, Angpow_swig_py.new_CheAlgo(farr))
    __swig_destroy__ = Angpow_swig_py.delete_CheAlgo

    def InverseChebyshevTransform(self):
        return Angpow_swig_py.CheAlgo_InverseChebyshevTransform(self)

    def ComputeIntegralUnscaled(self):
        return Angpow_swig_py.CheAlgo_ComputeIntegralUnscaled(self)

# Register CheAlgo in Angpow_swig_py:
Angpow_swig_py.CheAlgo_swigregister(CheAlgo)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Angpow_swig_py.delete_SwigPyIterator

    def value(self):
        return Angpow_swig_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return Angpow_swig_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return Angpow_swig_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return Angpow_swig_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return Angpow_swig_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return Angpow_swig_py.SwigPyIterator_copy(self)

    def next(self):
        return Angpow_swig_py.SwigPyIterator_next(self)

    def __next__(self):
        return Angpow_swig_py.SwigPyIterator___next__(self)

    def previous(self):
        return Angpow_swig_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return Angpow_swig_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return Angpow_swig_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return Angpow_swig_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return Angpow_swig_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return Angpow_swig_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return Angpow_swig_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return Angpow_swig_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in Angpow_swig_py:
Angpow_swig_py.SwigPyIterator_swigregister(SwigPyIterator)

class std_vector_CheFunc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return Angpow_swig_py.std_vector_CheFunc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return Angpow_swig_py.std_vector_CheFunc___nonzero__(self)

    def __bool__(self):
        return Angpow_swig_py.std_vector_CheFunc___bool__(self)

    def __len__(self):
        return Angpow_swig_py.std_vector_CheFunc___len__(self)

    def __getslice__(self, i, j):
        return Angpow_swig_py.std_vector_CheFunc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return Angpow_swig_py.std_vector_CheFunc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return Angpow_swig_py.std_vector_CheFunc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return Angpow_swig_py.std_vector_CheFunc___delitem__(self, *args)

    def __getitem__(self, *args):
        return Angpow_swig_py.std_vector_CheFunc___getitem__(self, *args)

    def __setitem__(self, *args):
        return Angpow_swig_py.std_vector_CheFunc___setitem__(self, *args)

    def pop(self):
        return Angpow_swig_py.std_vector_CheFunc_pop(self)

    def append(self, x):
        return Angpow_swig_py.std_vector_CheFunc_append(self, x)

    def empty(self):
        return Angpow_swig_py.std_vector_CheFunc_empty(self)

    def size(self):
        return Angpow_swig_py.std_vector_CheFunc_size(self)

    def swap(self, v):
        return Angpow_swig_py.std_vector_CheFunc_swap(self, v)

    def begin(self):
        return Angpow_swig_py.std_vector_CheFunc_begin(self)

    def end(self):
        return Angpow_swig_py.std_vector_CheFunc_end(self)

    def rbegin(self):
        return Angpow_swig_py.std_vector_CheFunc_rbegin(self)

    def rend(self):
        return Angpow_swig_py.std_vector_CheFunc_rend(self)

    def clear(self):
        return Angpow_swig_py.std_vector_CheFunc_clear(self)

    def get_allocator(self):
        return Angpow_swig_py.std_vector_CheFunc_get_allocator(self)

    def pop_back(self):
        return Angpow_swig_py.std_vector_CheFunc_pop_back(self)

    def erase(self, *args):
        return Angpow_swig_py.std_vector_CheFunc_erase(self, *args)

    def __init__(self, *args):
        Angpow_swig_py.std_vector_CheFunc_swiginit(self, Angpow_swig_py.new_std_vector_CheFunc(*args))

    def push_back(self, x):
        return Angpow_swig_py.std_vector_CheFunc_push_back(self, x)

    def front(self):
        return Angpow_swig_py.std_vector_CheFunc_front(self)

    def back(self):
        return Angpow_swig_py.std_vector_CheFunc_back(self)

    def assign(self, n, x):
        return Angpow_swig_py.std_vector_CheFunc_assign(self, n, x)

    def resize(self, *args):
        return Angpow_swig_py.std_vector_CheFunc_resize(self, *args)

    def insert(self, *args):
        return Angpow_swig_py.std_vector_CheFunc_insert(self, *args)

    def reserve(self, n):
        return Angpow_swig_py.std_vector_CheFunc_reserve(self, n)

    def capacity(self):
        return Angpow_swig_py.std_vector_CheFunc_capacity(self)
    __swig_destroy__ = Angpow_swig_py.delete_std_vector_CheFunc

# Register std_vector_CheFunc in Angpow_swig_py:
Angpow_swig_py.std_vector_CheFunc_swigregister(std_vector_CheFunc)

class std_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return Angpow_swig_py.std_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return Angpow_swig_py.std_vector_double___nonzero__(self)

    def __bool__(self):
        return Angpow_swig_py.std_vector_double___bool__(self)

    def __len__(self):
        return Angpow_swig_py.std_vector_double___len__(self)

    def __getslice__(self, i, j):
        return Angpow_swig_py.std_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return Angpow_swig_py.std_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return Angpow_swig_py.std_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return Angpow_swig_py.std_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return Angpow_swig_py.std_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return Angpow_swig_py.std_vector_double___setitem__(self, *args)

    def pop(self):
        return Angpow_swig_py.std_vector_double_pop(self)

    def append(self, x):
        return Angpow_swig_py.std_vector_double_append(self, x)

    def empty(self):
        return Angpow_swig_py.std_vector_double_empty(self)

    def size(self):
        return Angpow_swig_py.std_vector_double_size(self)

    def swap(self, v):
        return Angpow_swig_py.std_vector_double_swap(self, v)

    def begin(self):
        return Angpow_swig_py.std_vector_double_begin(self)

    def end(self):
        return Angpow_swig_py.std_vector_double_end(self)

    def rbegin(self):
        return Angpow_swig_py.std_vector_double_rbegin(self)

    def rend(self):
        return Angpow_swig_py.std_vector_double_rend(self)

    def clear(self):
        return Angpow_swig_py.std_vector_double_clear(self)

    def get_allocator(self):
        return Angpow_swig_py.std_vector_double_get_allocator(self)

    def pop_back(self):
        return Angpow_swig_py.std_vector_double_pop_back(self)

    def erase(self, *args):
        return Angpow_swig_py.std_vector_double_erase(self, *args)

    def __init__(self, *args):
        Angpow_swig_py.std_vector_double_swiginit(self, Angpow_swig_py.new_std_vector_double(*args))

    def push_back(self, x):
        return Angpow_swig_py.std_vector_double_push_back(self, x)

    def front(self):
        return Angpow_swig_py.std_vector_double_front(self)

    def back(self):
        return Angpow_swig_py.std_vector_double_back(self)

    def assign(self, n, x):
        return Angpow_swig_py.std_vector_double_assign(self, n, x)

    def resize(self, *args):
        return Angpow_swig_py.std_vector_double_resize(self, *args)

    def insert(self, *args):
        return Angpow_swig_py.std_vector_double_insert(self, *args)

    def reserve(self, n):
        return Angpow_swig_py.std_vector_double_reserve(self, n)

    def capacity(self):
        return Angpow_swig_py.std_vector_double_capacity(self)
    __swig_destroy__ = Angpow_swig_py.delete_std_vector_double

# Register std_vector_double in Angpow_swig_py:
Angpow_swig_py.std_vector_double_swigregister(std_vector_double)



