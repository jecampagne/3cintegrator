# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('Angpow_swig_py', [dirname(__file__)])
        except ImportError:
            import Angpow_swig_py
            return Angpow_swig_py
        if fp is not None:
            try:
                _mod = imp.load_module('Angpow_swig_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    Angpow_swig_py = swig_import_helper()
    del swig_import_helper
else:
    import Angpow_swig_py
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class wallTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallTimer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = Angpow_swig_py.new_wallTimer()
        try: self.this.append(this)
        except: self.this = this
    def start(self): return Angpow_swig_py.wallTimer_start(self)
    def stop(self): return Angpow_swig_py.wallTimer_stop(self)
    __swig_destroy__ = Angpow_swig_py.delete_wallTimer
    __del__ = lambda self : None;
wallTimer_swigregister = Angpow_swig_py.wallTimer_swigregister
wallTimer_swigregister(wallTimer)

class GenericFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericFunction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = Angpow_swig_py.new_GenericFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Angpow_swig_py.delete_GenericFunction
    __del__ = lambda self : None;
GenericFunction_swigregister = Angpow_swig_py.GenericFunction_swigregister
GenericFunction_swigregister(GenericFunction)

class ClassFunc1D(GenericFunction):
    __swig_setmethods__ = {}
    for _s in [GenericFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassFunc1D, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassFunc1D, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __call__(self, *args): return Angpow_swig_py.ClassFunc1D___call__(self, *args)
    def getValues(self, *args): return Angpow_swig_py.ClassFunc1D_getValues(self, *args)
    __swig_destroy__ = Angpow_swig_py.delete_ClassFunc1D
    __del__ = lambda self : None;
ClassFunc1D_swigregister = Angpow_swig_py.ClassFunc1D_swigregister
ClassFunc1D_swigregister(ClassFunc1D)

class Function1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Angpow_swig_py.new_Function1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return Angpow_swig_py.Function1D___call__(self, *args)
    __swig_destroy__ = Angpow_swig_py.delete_Function1D
    __del__ = lambda self : None;
Function1D_swigregister = Angpow_swig_py.Function1D_swigregister
Function1D_swigregister(Function1D)

class Function2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Angpow_swig_py.new_Function2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return Angpow_swig_py.Function2D___call__(self, *args)
    __swig_destroy__ = Angpow_swig_py.delete_Function2D
    __del__ = lambda self : None;
Function2D_swigregister = Angpow_swig_py.Function2D_swigregister
Function2D_swigregister(Function2D)

class CheFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CheFunc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Angpow_swig_py.new_CheFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Angpow_swig_py.delete_CheFunc
    __del__ = lambda self : None;
    def orderFunc(self): return Angpow_swig_py.CheFunc_orderFunc(self)
    def __call__(self, *args): return Angpow_swig_py.CheFunc___call__(self, *args)
    def ChebyshevCoeffFFT(self): return Angpow_swig_py.CheFunc_ChebyshevCoeffFFT(self)
    def ChebyshevTransform(self, *args): return Angpow_swig_py.CheFunc_ChebyshevTransform(self, *args)
CheFunc_swigregister = Angpow_swig_py.CheFunc_swigregister
CheFunc_swigregister(CheFunc)

class CheAlgo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheAlgo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CheAlgo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Angpow_swig_py.new_CheAlgo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Angpow_swig_py.delete_CheAlgo
    __del__ = lambda self : None;
    def ClenshawCurtisWeightsFast(self): return Angpow_swig_py.CheAlgo_ClenshawCurtisWeightsFast(self)
    def InverseChebyshevCoeffFFT(self): return Angpow_swig_py.CheAlgo_InverseChebyshevCoeffFFT(self)
    def InverseChebyshevTransform(self): return Angpow_swig_py.CheAlgo_InverseChebyshevTransform(self)
    def ComputeIntegralUnscaled(self): return Angpow_swig_py.CheAlgo_ComputeIntegralUnscaled(self)
CheAlgo_swigregister = Angpow_swig_py.CheAlgo_swigregister
CheAlgo_swigregister(CheAlgo)

# This file is compatible with both classic and new-style classes.


